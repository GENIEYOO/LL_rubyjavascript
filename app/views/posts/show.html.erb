<p id="notice"><%= notice %></p>

<p>
  <strong>Title:</strong>
  <%= @post.title %>
</p>

<p>
  <strong>Contents:</strong>
  <%= @post.contents %>
</p>

<%=form_tag create_comment_to_post_path, id: "comment" do%>
  <%= text_field_tag "comment[body]" %>
  <%= submit_tag "댓글달기" %>
<% end %>


<h3><span id = "word_count">0</span>/<%=Comment.MAX_LENGTH%></h3>

<%= link_to 'Edit', edit_post_path(@post), class: "btn btn-warning" %> 
<%= link_to 'Back', posts_path, class: "btn btn-success" %>
<% if @like %>
<%= link_to "Like".html_safe, like_to_post_path, class: "btn btn-info", id: "like_button" %> 
<%else%>
<%= link_to "Dislike".html_safe, like_to_post_path, class: "btn btn-danger", id: "like_button" %> 
<%end%>

<span class = 'badge' id='like_count'><%=@post.likes.count%></span>

<!--이 다음 라우트 ..-->
<table id = "comment_table" class="table">
  <thead>
    <tr>
      <th>댓글</th>
    </tr>
  </thead>
  <tbody>
      <% @post.comments.reverse.each do |p| %>
      <tr id = "comment-<%= p.id %>">
        <td><%=p.body %></td>
      <td><%= link_to "삭제", destroy_comment_to_posts_path(p.id), method: :delete, data: {confirm: "삭제하시겠습니까?"}, class: "btn btn-warning", remote: true %></td>
      </tr>
      <% end %>
  </tbody>
</table>
<script>
  $(function() {
    
     $('#like_button').on('click', function(e) {
      e.preventDefault();
      
      console.log("like button cliked");
      $.ajax({
        method: "POST",
        url: "<%= like_to_post_path %>"
      })
    })
    
    
    var form = $('#comment');
    $(document).on('submit', '#comment', function(e) {
     e.preventDefault();
     var contents = form.serialize();
     //seriallize는 모든 인풋정보를 파라미터로 만들어준다.
    // var contents = $("#comment_body").val();
     console.log(contents);
     $.ajax({
         url: "<%=create_comment_to_post_path %>",
         method: "POST",
         data: contents
        // data: {body: contents}
       });
     });
   
     var max_text_length = <%=Comment.MAX_LENGTH%> ;
    $('#comment').on('keyup', function() {
      var text_length=$('#comment_body').val().length;
      $('#word_count').addClass('text-success').removeClass('text-danger');
      // console.log(text_length);
      if(text_length > max_text_length) {
        alert("최대길이 넘음");
        $('#word_count').addClass('text-danger').removeClass('text-success');
        $('#comment_body').val($('#comment_body').val().substr(0, max_text_length));
        text_length = $('#comment_body').val().length;
      }
    $('#word_count').text(text_length);
    })
    
  })
  
  
//keyup 내가 눌렀다가 때는 순간 바로 반응해서 이벤트를 가지고 온다.
  
  
// #댓글 달기 ajax로 구현하기
// 1. input tag에 있는 값(댓글내용)을 입력한다.
// 1-0. submit 버튼을 클릭한다.(submit이벤트 발생)
// 1-1. input태그에 있는 값을 가져온다.
// 1-2. 값이 유효한지 확인한다.(빈 칸 인지 아닌지)
// 1-3.값이 없으면 값을 넣으라는 안내 메시지를 뿌린다.
// 2. ajax로 처리한다.
//2-0. 현재 글은 어딘지, 작성자는 누군지 파악한다.
//2-1. DB에 댓글을 저장한다.
// 3. 서버에서 처리가 완료되면 화면에 댓글을 출력한다.
//

//댓글 삭제하기 ajax 로 구현하기


//   $(function() {
//     var form = $('#comment');
//     form.on('click',function(d) {
//     d.preventDefault();
//     var contents = $('p').val();
//     console.log("haha");
//     $.ajax({
//         url: "<%#=create_comment_to_post_path %>",
//         method: "DELETE",
//         data: {body: contents}
//       })
//     });
//   })
  

// $("#deletebutton").on("click", function() {
//       $(".").remove()
      
//   ///////this does not want to remove the item from the database   
//       $.destroy("/tasks/" + itemId, {
//         _method: "destroy",
//         task: {
//           done: doneValue
//         }
//     });
    
// });

</script>